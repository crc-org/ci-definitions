---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: crc-builder
  labels:
    app.kubernetes.io/version: "cversion"
    redhat.com/product: openshift-local
    dev.lifecycle.io/phase: build
    openshift-local.redhat.com/component: binary
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/categories: binary
    tekton.dev/tags: openshift-local, binary, linux
    tekton.dev/displayName: "openshift local linux binary"
    tekton.dev/platforms: "linux/amd64, linux/arm64"
spec:
  description: >-
    This task will build openshift local binary for linux distributions 

  params:
  - name: crc-scm
    default: https://github.com/code-ready/crc.git
  - name: crc-scm-pr
    default: "''"
  - name: crc-scm-ref 
    default: main
  - name: s3-url
  - name: s3-access-key
  - name: s3-secret-key
  - name: s3-folder-path
  - name: s3-download-url

  results:
  - name: downloadable-base-url
    description: base url where the installer and the shasumfile can be downloaded
  - name: distributable-name
    description: distributable file name for the installer
  - name: shasumfile
    description: shasumfile name 

  steps:
  - name: build
    # cimage and cversion values should be passed to the template
    image: cimage:cversion-linux
    imagePullPolicy: Always
    script: |
        #!/bin/sh
        DATALAKE_URL=$(params.s3-url)
        DATALAKE_ACCESS_KEY=$(params.s3-access-key)
        DATALAKE_SECRET_KEY=$(params.s3-secret-key)

        # Optionals
        if [[ $(params.crc-scm) != "" ]]; then
          CRC_SCM=$(params.crc-scm)
        fi
        if [[ $(params.crc-scm-pr) != "" ]]; then
          CRC_SCM_PR=$(params.crc-scm-pr)
        fi
        if [[ $(params.crc-scm-ref) != "" ]]; then
          CRC_SCM_REF=$(params.crc-scm-ref)
        fi
        if [[ $(params.s3-folder-path) != "" ]]; then
          UPLOAD_PATH=$(params.s3-folder-path)
        fi

        # Build installer
        DEBUG=true 
        . entrypoint.sh

         if [[ $? -ne 0 ]]; then 
          exit 1
        fi

        # From entrypoint we can get UPLOAD_PATH env with the target bucket 
        echo -n "$(params.s3-download-url)/${UPLOAD_PATH}" | tee $(results.downloadable-base-url.path)
        # Linux generated files
        echo -n "crc-linux-amd64.tar.xz" | tee $(results.distributable-name.path)
        echo -n "crc-linux-amd64.tar.xz.sha256sum" | tee $(results.shasumfile.path)
    resources:      
      requests:
        memory: 450Mi
        cpu: 250m
      limits:
        memory: 3800Mi
        cpu: 1850m
    timeout: 900m