---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: snc-runner
  labels:
    # cversion values should be passed to the template
    app.kubernetes.io/version: "cversion"
    redhat.com/product: openshift-local
    dev.lifecycle.io/phase: build
    openshift-local.redhat.com/component: bundle
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/categories: openshift-local
    tekton.dev/tags: openshift-local, testing
    tekton.dev/displayName: "ocp bundle for openshift local"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run snc project on a target host to create a bundle for crc

    The target host should be snc compliant.

  workspaces:
    - name: storage
      description: volume to store outputs to connect within the target machine + state file for the infrastructure 
      mountPath: /opt/storage
    - name: ocp-pullsecret
      description: |
        crc secret name holding the pullsecret. This is only required if backed tested is crc preset

        secret should match following format:
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${secret-name}
        type: Opaque
        data:
          pullsecret: ${pullsecret-value}
      mountPath: /etc/crc
  
  params:
    # correlate params
    - name: workspace-resources-path
      description: path on workspace to find resources to connect and managed provisioned machine
    # remote target host params
    - name: host
      description: target host 
    - name: username
      description: username to connect to the provisioned machine
    - name: key
      description: key file name to connect to the provisioned machine within the workspace resources path   
    # SNC params
    - name: scm
      default: 'https://github.com/code-ready/snc.git'
    - name: ref
      default: 'master'
    - name: pr
      default: "''"
    - name: ocp-version
      description: ocp version
    - name: ocp-mirror
      default: "''"
    - name: ocp-extended-cert
      default: "enabled"
    # Destination
    - name: s3-url
    - name: s3-access-key
    - name: s3-secret-key
    - name: s3-path
    # Control params
    - name: debug
      description: debug purposes extend verbosity on cmds executed on the target
      default: 'false'
      
  steps:
    - name: runner
      # cimage and cversion values should be passed to the template
      image: cimage:cversion
      imagePullPolicy: Always
      script: |
        #!/bin/bash

        set pipefail

        # If debug add verbosity
        if [[ $(params.debug) == "true" ]]; then
          set -exuo pipefail
        fi
        
        # Set values for deliverest to run logic remotely
        DEBUG=$(params.debug)
        TARGET_HOST=$(params.host)
        TARGET_HOST_USERNAME=$(params.username)
        TARGET_HOST_KEY_PATH=/opt/storage/$(params.workspace-resources-path)/$(params.key)
        chmod 600 ${TARGET_HOST_KEY_PATH}
        TARGET_FOLDER=crc-snc-runner
        TARGET_RESULTS=results
        TARGET_CLEANUP='true'
        if [[ $(params.debug) == "true" ]]; then
          TARGET_CLEANUP='false'
        fi

        # Image will excute run.sh on remote host 
        # Usage run.sh -ocp-ps-path /Users/.../ps -ocp-version 4.1X.X -ocp-extended-cert enabled \
        #               -s3-url https://amazon.es/ -s3-ak XXXX -s3-sk XXXX -s3-path distributables/resources/bundles \
        #               [-scm https://github.com/code-ready/snc.git] [-ref master] [-pr] [-ocp-mirror] 

        # Pull secret (if exists) we will use ASSETS_FOLDER defined on the image
        # to let deliverest move the pull secret to target host
        if test -f /etc/crc/pullsecret; then
          # ASSETS_FOLDER ENV is defined at Containerfile
          # All assets inside that folder will be copied to the target host
          cp /etc/crc/pullsecret ${ASSETS_FOLDER}/pullsecret
        fi

        # Compose the run.sh command based on params
        cmd="${TARGET_FOLDER}/run.sh -ocp-ps-path /home/$(params.username)/${TARGET_FOLDER}/pullsecret "
        cmd="$cmd -ocp-version $(params.ocp-version) "
        cmd="$cmd -ocp-extended-cert $(params.ocp-extended-cert) "
        cmd="$cmd -s3-url $(params.s3-url) "
        cmd="$cmd -s3-ak $(params.s3-access-key) "
        cmd="$cmd -s3-sk $(params.s3-secret-key) "
        cmd="$cmd -s3-path $(params.s3-path) "
        if [[ $(params.pr) != "" ]]; then
          cmd="$cmd -pr $(params.pr) "
        fi
        if [[ $(params.ocp-mirror) != "" ]]; then
          cmd="$cmd -ocp-mirror $(params.ocp-mirror) "
        fi
      
        # Exec
        . entrypoint.sh "${cmd}"
      
      resources:      
        requests:
          memory: "50Mi"
          cpu: "5m"
        limits:
          memory: "70Mi"
          cpu: "10m"

  